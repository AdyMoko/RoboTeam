{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","randomChars","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","reset","type","placeholder","onChange","title","onClick","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","onReset","tempNumber","Math","floor","random","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAceA,EAZF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,YAC/B,OACE,sBAAKC,UAAU,4EAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,GAA1B,OAA+BC,EAA/B,oBACrB,gCACE,6BAAKH,IACL,4BAAIC,WCeGM,EApBE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQL,EAAkB,EAAlBA,YAC1B,OACE,8BAEIK,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CACER,YAAaA,EAEbD,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,MAAOO,EAAOG,GAAGV,OAHZU,SCUJC,EAnBG,SAAC,GAAyC,EAAvCC,YAAwC,IAA3BC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,MAC9C,OACE,sBAAKX,UAAU,UAAf,UACE,uBACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUJ,IAEZ,wBACEV,UAAU,yDACVe,MAAM,0BACNC,QAASL,EAHX,sCCASM,EATA,SAACC,GACd,OACE,qBACAC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,iBAAkBC,OAAQ,QADhE,SAEGJ,EAAMK,YC8CEC,G,wDA7Cb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAElB,YAAaiB,EAAME,OAAOC,SAhB9B,EAmBdC,QAAU,WACR,IAAIC,EAAaC,KAAKC,MAAoB,IAAdD,KAAKE,UACjC,EAAKP,SAAS,CAAC5B,YAAagC,KAnB5B,EAAKI,MAAQ,CACX/B,OAAQ,GACRK,YAAa,GACbV,YAAY,IALF,E,qDASd,WAAqB,IAAD,OAClBqC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKb,SAAS,CAAEvB,OAAQoC,S,oBAa5C,WACE,MAA6CC,KAAKN,MAA1C/B,EAAR,EAAQA,OAAQK,EAAhB,EAAgBA,YAAaV,EAA7B,EAA6BA,YACvB2C,EAAiBtC,EAAOuC,QAAO,SAAAC,GACnC,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASrC,EAAYoC,kBAGvD,OAAQzC,EAAO2C,OAGX,sBAAK/C,UAAU,KAAf,UACE,oBAAIA,UAAU,MAAd,yBACA,cAAC,EAAD,CAAWU,aAAc+B,KAAKhB,eAAgBd,MAAO8B,KAAKX,UAC1D,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQsC,EAAgB3C,YAAaA,SANrD,2H,GAjCYiD,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ed8ac85e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id, randomChars}) => {\r\n  return (\r\n    <div className='hover-bg-light-yellow tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}${randomChars}3?size=300x300`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots, randomChars }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              randomChars={randomChars}\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange, reset }) => {\r\n  return (\r\n    <div className='pa2 ma3'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n      <button\r\n        className='hover-bg-dark-red hover-white br3 bg-light-red pa3 ma2'\r\n        title='WARNING: no going back!'\r\n        onClick={reset}>        \r\n        Reset Robot Pictures        \r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div \r\n    style={{ overflowY: 'scroll', border: '2px solid grey', height: '70vh'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: '',\n      randomChars:''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  };\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  };\n\n  onReset = () => {\n    let tempNumber = Math.floor(Math.random()*100);       \n    this.setState({randomChars: tempNumber});    \n  };  \n \n\n  render() {\n    const { robots, searchfield, randomChars } = this.state;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });   \n\n    return !robots.length ?\n      <h1>Loading robots...please wait...(btw you need an internet connection for this to work)</h1> :\n      (\n        <div className='tc'>\n          <h1 className='mid'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} reset={this.onReset}/>\n          <Scroll>\n            <CardList robots={filteredRobots} randomChars={randomChars} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}